// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CampaignInsight {
  id               String   @id @default(cuid())
  campaignId       String   @map("campaign_id")
  campaignName     String   @map("campaign_name")
  date             DateTime
  spend            Float
  impressions      Int
  clicks           Int
  conversions      Int
  conversionValue  Float    @map("conversion_value")
  ctr              Float
  cpc              Float
  cpm              Float
  roas             Float
  cpa              Float
  costPerPurchase  Float    @map("cost_per_purchase")
  frequency        Float
  reach            Int
  relevanceScore   Int?     @map("relevance_score")
  qualityRanking   String?  @map("quality_ranking")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  recommendations AIRecommendation[]
  creatives       CreativeInsight[]
  alerts          AlertLog[]
  audiences       AudiencePerformance[]

  @@unique([campaignId, date])
  @@map("campaign_insights")
}

model CreativeInsight {
  id               String          @id @default(cuid())
  adId             String          @map("ad_id")
  campaignId       String          @map("campaign_id")
  creativeName     String          @map("creative_name")
  date             DateTime
  impressions      Int
  clicks           Int
  ctr              Float
  frequency        Float
  fatigueScore     Float           @map("fatigue_score")
  performanceScore Float           @map("performance_score")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  campaign         CampaignInsight @relation(fields: [campaignId], references: [campaignId])

  @@unique([adId, date])
  @@map("creative_insights")
}

model AIRecommendation {
  id              String          @id @default(cuid())
  campaignId      String          @map("campaign_id")
  date            DateTime
  type            String
  title           String
  description     String          @db.Text
  confidenceScore Float           @map("confidence_score")
  expectedImpact  String          @map("expected_impact")
  priority        String
  actionRequired  String          @map("action_required") @db.Text
  implemented     Boolean         @default(false)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  campaign        CampaignInsight @relation(fields: [campaignId], references: [campaignId])

  @@map("ai_recommendations")
}

model AlertLog {
  id               String          @id @default(cuid())
  campaignId       String          @map("campaign_id")
  alertType        String          @map("alert_type")
  severity         String
  message          String          @db.Text
  thresholdValue   Float           @map("threshold_value")
  currentValue     Float           @map("current_value")
  isAcknowledged   Boolean         @default(false) @map("is_acknowledged")
  createdAt        DateTime        @default(now()) @map("created_at")
  acknowledgedAt   DateTime?       @map("acknowledged_at")

  campaign         CampaignInsight @relation(fields: [campaignId], references: [campaignId])

  @@map("alert_logs")
}

model AudiencePerformance {
  id                String          @id @default(cuid())
  campaignId        String          @map("campaign_id")
  audienceName      String          @map("audience_name")
  audienceType      String          @map("audience_type")
  size              Int
  reach             Int
  impressions       Int
  clicks            Int
  conversions       Int
  spend             Float
  roas              Float
  cpa               Float
  overlapPercentage Float?          @map("overlap_percentage")
  date              DateTime
  createdAt         DateTime        @default(now()) @map("created_at")

  campaign          CampaignInsight @relation(fields: [campaignId], references: [campaignId])

  @@unique([campaignId, audienceName, date])
  @@map("audience_performance")
}